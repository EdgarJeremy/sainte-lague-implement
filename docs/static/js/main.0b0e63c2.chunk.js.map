{"version":3,"sources":["saintLague.js","App.js","serviceWorker.js","index.js"],"names":["terbesar","data","suara","index","i","length","saintLague","kursi","hasil","map","d","label","kalkulasiPembagian","j","nilai","push","App","state","seat","result","mode","e","this","setState","target","value","splice","_this$state","alert","_this2","_this$state2","react_default","a","createElement","className","style","backgroundColor","maxWidth","margin","padding","type","placeholder","onChange","onChangeSeat","bind","key","tabIndex","onClick","onDelete","onChangeLabel","onChangeVote","onAdd","onHitung","onBack","r","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b0e63c2.chunk.js","sourcesContent":["/**\n * Menghitung hak jumlah kursi di parlemen sesuai dengan jumlah suara di daerah pemilihan\n * @param {number} kursi - jumlah kursi yang akan di distribusikan di dapil\n * @param {Array.<{label: string, suara: number}>} data - data jumlah suara per label partai\n * @returns {Array.<{label: string, kursi: number}>} data jumlah kursi per label partai\n */\nfunction saintLague(kursi, data) {\n    // Map data menjadi struktur yang memiliki jumlah kursi\n    var hasil = data.map((d) => ({ label: d.label, kursi: 0 }));\n\n    // Pengulangan sesuai jumlah kursi\n    for (var i = 0; i < kursi; i++) {\n        // Variable untuk menampung informasi kalkulasi pembagian suara sementara\n        let kalkulasiPembagian = [];\n\n        // Pengulangan data jumlah suara per partai\n        for (var j = 0; j < data.length; j++) {\n            // Jumlah suara partai (ke-i) dibagi dengan angka ganjil tergantung dengan jumlah kursi yang sudah didapatkan\n            // dengan formula : jumlah kursi sementara * 2 + 1\n            const nilai = data[j].suara / ((hasil[j].kursi * 2) + 1);\n            // Nilai pembagian di-push di variable kalkulasiPembagian\n            kalkulasiPembagian.push({ suara: nilai });\n        }\n        // Menemukan index partai dengan jumlah suara terbesar sementara\n        const indexTerbesar = terbesar(kalkulasiPembagian);\n        // Menambah kursi ke partai yang memiliki suara terbesar\n        hasil[indexTerbesar].kursi += 1;\n    }\n\n    return hasil;\n}\n\n/**\n * Menemukan index item dengan suara terbesar pada data hasil kalkulasi pembagian suara sementara\n * @param {Array.<{label: string, suara: number}>} data - data kalkulasi pembagian suara sementara\n * @returns {number} index item dengan suara terbesar\n */\nfunction terbesar(data) {\n    // Set nilai terbesar menjadi jumlah suara partai pertama\n    let terbesar = data[0].suara;\n    // Set index menjadi index partai pertama\n    let index = 0;\n\n    // Pengulangan data kalkulasi pembagian suara per partai sementara\n    for (var i = 0; i < data.length; i++) {\n        // Jika nilai suara partai (ke-i) lebih besar daripada nilai variable suara terbesar terakhir\n        if (data[i].suara > terbesar) {\n            // Set index (ke-i)\n            index = i;\n            // Set nilai variable suara terbesar menjadi partai (ke-i)\n            terbesar = data[i].suara;\n        }\n    }\n    // Mengembalikan nilai index\n    return index;\n}\n\nexport default saintLague;\n\n// USAGE\n// import saintLague from './src/fn-javascript-node-es6';\n// const parlemen = saintLague(5, [\n//     { label: 'A', suara: 64000 },\n//     { label: 'B', suara: 18000 },\n//     { label: 'C', suara: 15000 },\n//     { label: 'D', suara: 8600 },\n//     { label: 'E', suara: 8000 },\n//     { label: 'F', suara: 7600 }\n// ]);\n// console.log(parlement);","import React, { Component } from 'react';\nimport saintLague from './saintLague';\n\nclass App extends Component {\n\n  state = {\n    data: [{\n      label: '',\n      suara: ''\n    }],\n    seat: '',\n    result: [],\n    mode: 0\n  }\n\n  onChangeSeat(e) {\n    this.setState({ seat: e.target.value });\n  }\n\n  onChangeLabel(e, i) {\n    const { data } = this.state;\n    data[i].label = e.target.value;\n    this.setState({ data });\n  }\n\n  onChangeVote(e, i) {\n    const { data } = this.state;\n    data[i].suara = e.target.value;\n    this.setState({ data });\n  }\n\n  onAdd() {\n    const { data } = this.state;\n    data.push({ label: '', suara: '' });\n    this.setState({ data });\n  }\n\n  onDelete(i) {\n    const { data } = this.state;\n    data.splice(i, 1);\n    this.setState({ data });\n  }\n\n  onHitung() {\n    const { seat, data } = this.state;\n    if(seat && seat !== 0) {\n      const result = saintLague(seat, data);\n      this.setState({ \n        mode: 1,\n        result: result\n      });\n    } else {\n      alert('Isi jumlah kursi');\n    }\n  }\n\n  onBack() {\n    this.setState({ mode: 0 });\n  }\n\n  render() {\n    const { data, seat, mode, result } = this.state;\n\n    return (\n      <div className=\"App\" style={{ backgroundColor: '#ffffff', maxWidth: '500px', margin: '20px auto', padding: '20px' }}>\n        {mode === 0 ? (\n          <div>\n            <h1>Sainte-Lague</h1>\n            <h2>Kalkulator Kursi Parlemen</h2>\n\n            <div className=\"ui divider\"></div>\n\n            <div className=\"ui fluid labeled input\">\n              <div className=\"ui label\">Kursi Dapil</div>\n              <input type=\"number\" placeholder=\"Jumlah kursi untuk dibagi...\" value={seat} onChange={this.onChangeSeat.bind(this)} />\n            </div>\n\n            <div className=\"ui divider\"></div>\n\n            <table className=\"ui celled table\">\n              <thead>\n                <tr>\n                  <th className=\"two wide\"></th>\n                  <th className=\"seven wide\">Partai</th>\n                  <th className=\"seven wide\">Suara</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.map((d, i) => (\n                  <tr key={i}>\n                    <td>\n                      <div className={\"ui vertical animated button fluid negative \" + ((data.length === 1 ? 'disabled' : ''))} tabIndex=\"0\" onClick={() => this.onDelete(i)}>\n                        <div className=\"hidden content\">Hapus</div>\n                        <div className=\"visible content\">\n                          <i className=\"trash icon\"></i>\n                        </div>\n                      </div>\n                    </td>\n                    <td>\n                      <div className=\"ui fluid input\">\n                        <input type=\"text\" placeholder=\"Nama partai...\" value={d.label} onChange={(e) => this.onChangeLabel(e, i)} />\n                      </div>\n                    </td>\n                    <td>\n                      <div className=\"ui fluid input\">\n                        <input type=\"number\" placeholder=\"Jumlah suara...\" value={d.suara} onChange={(e) => this.onChangeVote(e, i)} />\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n\n            <div className=\"ui divider\"></div>\n\n            <div className=\"two ui buttons\">\n              <button className=\"ui green button\" onClick={this.onAdd.bind(this)}>\n                <i className=\"plus icon\"></i> Tambah Data\n              </button>\n              <button className=\"ui blue button\" onClick={this.onHitung.bind(this)}>\n                <i className=\"angle right icon\"></i> Hitung\n              </button>\n            </div>\n\n            <div className=\"ui divider\"></div>\n          </div>\n        ) : (\n            <div>\n              <h1>Sainte-Lague</h1>\n              <h2>Kalkulator Kursi Parlemen</h2>\n\n              <div className=\"ui divider\"></div>\n              <button className=\"ui fluid button\" onClick={this.onBack.bind(this)}>\n                <i className=\"angle left icon\"></i> Kembali\n              </button>\n\n              <div className=\"ui divider\"></div>\n              <table className=\"ui celled table\">\n                <thead>\n                  <tr>\n                    <th>Partai</th>\n                    <th>Kursi</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {result.map((r, i) => (\n                    <tr key={i}>\n                      <td>{r.label}</td>\n                      <td>{r.kursi}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}